document.addEventListener('DOMContentLoaded', () => {
    const questionTitleEl = document.getElementById('question-title');
    const optionsContainerEl = document.getElementById('options-container');
    const feedbackAreaEl = document.getElementById('feedback-area');
    const feedbackTitleEl = document.getElementById('feedback-title');
    // REMOVIDO: const feedbackTextEl = document.getElementById('feedback-text'); // N√£o usado
    const nextQuestionButton = document.getElementById('next-question-button'); // J√° est√° no feedback, obteremos depois
    const backButton = document.getElementById('back-to-lesson');
    const progressBar = document.querySelector('.progress-bar');

    let currentQuestionIndex = 0;
    let score = 0;
    let questions = [];
    let lessonId = null; // Guardar o lessonId para navega√ß√£o
    let chapterId = null; // Guardar o chapterId para navega√ß√£o

    async function startQuiz() {
        const urlParams = new URLSearchParams(window.location.search);
        lessonId = urlParams.get('lesson_id');
        chapterId = urlParams.get('chapter_id');

        // ALTERA√á√ÉO: Usar caminhos absolutos
        backButton.href = `/lesson.html?lesson_id=${lessonId}&chapter_id=${chapterId}`;

        if (!lessonId) {
            questionTitleEl.textContent = "Erro: ID da li√ß√£o n√£o encontrado.";
            return;
        }

        try {
            const response = await fetch(`/api/exercises?lesson_id=${lessonId}`);
            if (!response.ok) throw new Error('Falha ao carregar exerc√≠cios.');
            
            questions = await response.json();

            if (!questions || questions.length === 0) {
                questionTitleEl.textContent = "Nenhum exerc√≠cio encontrado para esta li√ß√£o.";
                optionsContainerEl.innerHTML = '';
                return;
            }

            // Filtra apenas os exerc√≠cios do tipo multiple_choice por agora
            questions = questions.filter(q => q.type === 'multiple_choice');

             if (!questions || questions.length === 0) {
                questionTitleEl.textContent = "Nenhum exerc√≠cio de m√∫ltipla escolha encontrado.";
                optionsContainerEl.innerHTML = '';
                return;
            }


            loadQuestion(currentQuestionIndex);

        } catch (error) {
            console.error("Erro ao buscar exerc√≠cios:", error);
            questionTitleEl.textContent = "N√£o foi poss√≠vel carregar os exerc√≠cios.";
        }
    }

    function loadQuestion(questionIndex) {
        // Limpezas
        optionsContainerEl.innerHTML = '';
        feedbackAreaEl.classList.add('hidden');
        optionsContainerEl.classList.remove('options-disabled'); // Reativa as op√ß√µes

        const question = questions[questionIndex];
        questionTitleEl.innerHTML = question.text; // Usar innerHTML para interpretar `<code>` se houver

        // Atualiza a barra de progresso
        const progressPercentage = (questionIndex / questions.length) * 100;
        progressBar.style.width = `${progressPercentage}%`;

        // --- A CORRE√á√ÉO PRINCIPAL EST√Å AQUI ---
        let optionsArray = [];
        if (typeof question.options === 'string') {
            try {
                optionsArray = JSON.parse(question.options); // Converte a string JSON num array
            } catch (e) {
                console.error("Erro ao fazer parse das op√ß√µes JSON:", e);
                optionsContainerEl.innerHTML = "<p><i>Erro no formato das op√ß√µes.</i></p>";
                return; // N√£o continuar se as op√ß√µes estiverem mal formatadas
            }
        } else if (Array.isArray(question.options)) {
             optionsArray = question.options; // Se j√° for array, usa diretamente
        }
        // ------------------------------------

        if (question.type === 'multiple_choice' && optionsArray.length > 0) {
            optionsArray.forEach((optionText, index) => {
                const optionElement = document.createElement('div');
                optionElement.className = 'option-item';
                optionElement.textContent = optionText; // Usa o texto da op√ß√£o do array
                optionElement.addEventListener('click', () => selectAnswer(optionElement, index, question.correct_option_index));
                optionsContainerEl.appendChild(optionElement);
            });
        } 
        // Remover a l√≥gica de fill_in_blank por enquanto, j√° que filtramos as quest√µes
        /* else if (question.type === 'fill_in_blank') {
            optionsContainerEl.innerHTML = "<p><i>(Tipo 'Preencher o espa√ßo' ainda n√£o implementado.)</i></p>";
            // Configurar bot√£o Continuar para este tipo se necess√°rio
        } */
        else {
             optionsContainerEl.innerHTML = "<p><i>Tipo de pergunta n√£o suportado ou sem op√ß√µes.</i></p>";
        }
    }
    
    // Fun√ß√£o para tratar o clique no bot√£o "Continuar"
    function handleNextQuestion() {
        currentQuestionIndex++;
        if (currentQuestionIndex < questions.length) {
            loadQuestion(currentQuestionIndex);
        } else {
            endQuiz();
        }
    }

    // Fun√ß√£o chamada quando uma op√ß√£o √© selecionada
    function selectAnswer(selectedElement, selectedOptionIndex, correctOptionIndex) {
        optionsContainerEl.classList.add('options-disabled'); // Desativa cliques futuros nas op√ß√µes
        const isCorrect = selectedOptionIndex === correctOptionIndex;

        // Limpa a √°rea de feedback antes de adicionar novo conte√∫do
        feedbackAreaEl.innerHTML = ''; 

        const feedbackTitle = document.createElement('h3');
        feedbackTitle.id = 'feedback-title'; // Reatribui ID se necess√°rio
        
        if (isCorrect) {
            selectedElement.classList.add('correct');
            feedbackTitle.textContent = "Correto!";
            feedbackTitle.className = 'correct-feedback'; // Classe para cor verde
            feedbackAreaEl.className = 'feedback-area correct-feedback'; // Classe para fundo verde
            score++;
        } else {
            selectedElement.classList.add('incorrect');
            // Mostra qual era a correta
            if (optionsContainerEl.children[correctOptionIndex]) {
                 optionsContainerEl.children[correctOptionIndex].classList.add('correct');
            }
            feedbackTitle.textContent = "Incorreto!";
            feedbackTitle.className = 'incorrect-feedback'; // Classe para cor vermelha
            feedbackAreaEl.className = 'feedback-area incorrect-feedback'; // Classe para fundo vermelho
        }

        feedbackAreaEl.appendChild(feedbackTitle); // Adiciona o t√≠tulo H3

        // Adiciona o bot√£o continuar
        const nextButton = document.createElement('button');
        nextButton.id = 'next-question-button';
        nextButton.textContent = 'Continuar';
        nextButton.addEventListener('click', handleNextQuestion);
        feedbackAreaEl.appendChild(nextButton);

        feedbackAreaEl.classList.remove('hidden'); // Mostra a √°rea de feedback
    }

    // Fun√ß√£o para terminar o quiz
    function endQuiz() {
        progressBar.style.width = `100%`;
        questionTitleEl.textContent = `Exerc√≠cios Conclu√≠dos!`;
        optionsContainerEl.innerHTML = `<div class="completion-box"><span class="completion-icon">üèÜ</span><h3>Resultado Final</h3><p>Voc√™ acertou ${score} de ${questions.length} perguntas.</p> <a href="/lesson.html?lesson_id=${lessonId}&chapter_id=${chapterId}" class="back-button-link">Voltar √† Li√ß√£o</a></div>`; // Mensagem final com bot√£o voltar
        feedbackAreaEl.classList.add('hidden'); // Esconde √°rea de feedback
        // Adicionar bot√£o para voltar √† li√ß√£o ou dashboard se necess√°rio
    }

    // Inicia o quiz quando a p√°gina carrega
    startQuiz();
});